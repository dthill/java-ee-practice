package pgfsd.controllers.products;

import pgfsd.entities.Product;
import pgfsd.services.products.ProductsService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

@WebServlet(name = "ProductAddController", value = "/product-add-controller")
public class ProductAddController extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        PrintWriter out = response.getWriter();
        String name = request.getParameter("name");
        String priceString = request.getParameter("price");
        Double price = null;
        Product product = new Product();
        if (name.equals("")) {
            out.println("Name is not a valid value,");
            return;
        }
        product.setName(name);
        try {
            if (priceString == null || priceString.equals("")) {
                throw new NumberFormatException();
            }
            price = Double.parseDouble(priceString);
            if (price < 0) {
                throw new NumberFormatException();
            }
            product.setPrice(price);
        } catch (NumberFormatException e) {
            out.println("Price is not a valid value.");
            return;
        }
        boolean success = new ProductsService().addProduct(product);
        if (!success) {
            out.println("Could not add the new product as the given ID already exists, please try again");
            return;
        }
        out.println("Product added successfully");
    }
}
package pgfsd.controllers.products;

import pgfsd.dto.SearchTerm;
import pgfsd.entities.Product;
import pgfsd.services.products.ProductsService;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

@WebServlet(name = "ProductsController", value = "/product-list-controller")
public class ProductListController extends HttpServlet {
    private ProductsService productsService;

    @Override
    public void init() {
        productsService = new ProductsService();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        SearchTerm searchTerm = new SearchTerm();
        searchTerm.setSearchTerm(request.getParameter("search"));
        List<Product> result = productsService.findProduct(searchTerm);
        PrintWriter out = response.getWriter();
        if (result.size() == 0) {
            out.println("<tr><td></td><td>No products found with the given id or product name</td></tr>");
        } else {
            for (Product product : result) {
                out.println("<tr><td>" + product.getId() + "</td><td>" + product.getName() + "</td><td>" + String.format("%.2f", product.getPrice()) + "</td></tr>");
            }
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doGet(request, response);
    }
}
package pgfsd.entities;

import jakarta.persistence.*;

@Entity
@Table(name = "Products")
public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private String name;
    private double price;

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
package pgfsd.services.db;

import org.hibernate.SessionFactory;
import org.hibernate.boot.Metadata;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;

public class DBUtil {

    public static final SessionFactory sessionFactory = buildSessionFactory();

    private static SessionFactory buildSessionFactory() {
        try {
            StandardServiceRegistry standardRegistry = new StandardServiceRegistryBuilder()
                    .configure("hibernate.cfg.xml")
                    .build();
            Metadata metaData = new MetadataSources(standardRegistry)
                    .getMetadataBuilder()
                    .build();
            return metaData
                    .getSessionFactoryBuilder()
                    .build();
        } catch (Exception e) {
            throw new ExceptionInInitializerError(e);
        }
    }


}
package pgfsd.services.products;

import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Root;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import pgfsd.dto.SearchTerm;
import pgfsd.entities.Product;
import pgfsd.services.db.DBUtil;

import java.util.Arrays;
import java.util.List;

public class ProductsService {

    public List<Product> findProduct(SearchTerm searchTerm) {
        SessionFactory factory = DBUtil.sessionFactory;
        Session session = factory.openSession();
        CriteriaBuilder criteriaBuilder = session.getCriteriaBuilder();
        CriteriaQuery<Product> criteriaQuery = criteriaBuilder.createQuery(Product.class);
        Root<Product> root = criteriaQuery.from(Product.class);
        CriteriaQuery<Product> allProducts = criteriaQuery.select(root);
        List<Product> result;
        if (searchTerm.getSearchTerm() == null || searchTerm.getSearchTerm().equals("")) {
            result = session.createQuery(allProducts).getResultList();
        } else {
            Integer searchId;
            try {
                searchId = Integer.parseInt(searchTerm.getSearchTerm());
            } catch (NumberFormatException e) {
                searchId = null;
            }
            CriteriaQuery<Product> matchingProducts;
            if (searchId != null) {
                matchingProducts = criteriaQuery.where(
                        criteriaBuilder.or(
                                criteriaBuilder.equal(root.get("id"), searchId),
                                criteriaBuilder.like(root.get("name"), "%" + searchTerm.getSearchTerm() + "%")
                        )
                );
            } else {
                matchingProducts = criteriaQuery.where(
                        criteriaBuilder.like(root.get("name"), "%" + searchTerm.getSearchTerm() + "%")
                );
            }
            result = session.createQuery(matchingProducts).getResultList();
        }
        session.close();
        return result;
    }

    public boolean addProduct(Product product) {
        SessionFactory factory = DBUtil.sessionFactory;
        Session session = factory.openSession();
        Transaction transaction = session.beginTransaction();
        try {
            session.persist(product);
            transaction.commit();
            session.close();
            return true;
        } catch (HibernateException e) {
            System.out.println(Arrays.toString(e.getStackTrace()));
            if (transaction != null) {
                transaction.rollback();
            }
            session.close();
            return false;
        }
    }
}
